from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from typing import Coroutine

# * –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
from keyboards.main import only_to_main
from keyboards.subscribtions import buying_subcribtion
# * –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É—á–∫–∏ –ø–æ–¥ –±–¥
from utils import database_utils
# * –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
from config.config_reader import bot_config

# * –æ–±—ä—è–≤–ª—è–µ–º –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä
bot = Bot(token=bot_config.TOKEN.get_secret_value())
router = Router()


async def buying_approve(message: Message, sub_type: str) -> Coroutine:
    """—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sub_type (str): —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    markup_inline = buying_subcribtion.get(sub_type=sub_type)
    await message.delete()
    await message.answer('üîç –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É?', 
                         reply_markup=markup_inline) 
    

async def buying_failure(message: Message) -> Coroutine:
    """—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –æ—Ç–∫–∞–∑ –ø–æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    markup_inline = only_to_main.get()
    await message.delete()
    await message.answer('‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ '\
                        '(–∏–ª–∏ –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥)', 
                         reply_markup=markup_inline)


@router.callback_query(F.data == "buy_trial")
async def callback_buy_trial(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ trial

    Args:
        callback (CallbackQuery): –∫–æ–ª–±—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    is_have_trial = database_utils.Check\
        .check_user_for_trial_subscribtion_by_user_id(user_id=callback.message.chat.id)
    is_have_subscribtions = database_utils.Check\
        .check_subcription_by_user_id(user_id=callback.message.chat.id)
    if not is_have_trial and not is_have_subscribtions:
        await buying_approve(message=callback.message, sub_type='TRIAL')
    else:
        await buying_failure(message=callback.message)


@router.callback_query(F.data == "buy_light")
async def callback_buy_light(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ light

    Args:
        callback (CallbackQuery): –∫–æ–ª–±—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    amount = database_utils.Get.get_subscribtion_price_by_title(title='LIGHT')
    is_have_enough_money = database_utils.Check\
        .check_user_have_enough_money(user_id=callback.message.chat.id, amount=amount)
    if is_have_enough_money:
        await buying_approve(message=callback.message, sub_type='LIGHT')
    else:
        await buying_failure(message=callback.message)


@router.callback_query(F.data == "buy_standard")
async def callback_buy_standard(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ standard

    Args:
        callback (CallbackQuery): –∫–æ–ª–±—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    amount = database_utils.Get.get_subscribtion_price_by_title(title='STANDARD')
    is_have_enough_money = database_utils.Check\
        .check_user_have_enough_money(user_id=callback.message.chat.id, amount=amount)
    if is_have_enough_money:
        await buying_approve(message=callback.message, sub_type='STANDARD')
    else:
        await buying_failure(message=callback.message)

@router.callback_query(F.data == "buy_premium")
async def callback_buy_premium(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ premium

    Args:
        callback (CallbackQuery): –∫–æ–ª–±—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    amount = database_utils.Get.get_subscribtion_price_by_title(title='PREMIUM')
    is_have_enough_money = database_utils.Check\
        .check_user_have_enough_money(user_id=callback.message.chat.id, amount=amount)
    if is_have_enough_money:
        await buying_approve(message=callback.message, sub_type='PREMIUM')
    else:
        await buying_failure(message=callback.message)


@router.callback_query(F.data.startswith('buying|'))
async def callback_buying_subcribtion(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –ø–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    Args:
        callback (CallbackQuery): –∫–æ–ª–±—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    sub_title = callback.data.split('|')[1]
    is_have_active_subscribtion = database_utils.Check\
        .check_user_have_active_subcribtion(user_id=callback.message.chat.id)
    if is_have_active_subscribtion:
        sub_id = database_utils.Get\
            .get_last_subscribtion_id_by_user_id(user_id=callback.message.chat.id)
        days = database_utils.Get\
            .get_subscribtion_days_by_title(title=sub_title)
        database_utils.Update.update_subscription_for_ndays(sub_id=sub_id, days=days)
    else:
        database_utils.Create\
            .create_new_subscribtion(user_id=callback.message.chat.id,
                                     user_name=callback.message.chat.username,
                                     sub_type=sub_title)
    amount = database_utils.Get.get_subscribtion_price_by_title(title={sub_title})
    database_utils.Update.update_user_balance_by_user_id(user_id=callback.message.chat.id, amount=(-1*amount))
    markup_inline = only_to_main.get()
    await callback.message.delete()
    invite = await bot.create_chat_invite_link(chat_id=-1001975523437, member_limit=1)
    await callback.message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É\n\n'\
                                  f'–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è üëá:\n\n {invite.invite_link}',
                                  reply_markup=markup_inline)
from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from typing import Coroutine

# * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–æ—Ç–∞
from config.config_reader import bot_config
# * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É—á–∫–∏ –ø–æ–¥ –±–¥
from utils import database_utils
# * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
from keyboards.admin import admin_tickets, admin_ticket_info, only_to_admin

# * –æ–±—ä—è–≤–ª—è–µ–º –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä
bot = Bot(token=bot_config.TOKEN.get_secret_value())
router = Router()

class Ticket(StatesGroup):
    waiting_for_response = State()
    

@router.callback_query(F.data == "admin_tickets")
async def callback_admin_tickets(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤

    Args:
        callback (CallbackQuery): —Å–∞–º –∫–æ–ª—é—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    markup_inline = admin_tickets.get()
    await callback.message.delete()
    await callback.message.answer('üóÇ –≠—Ç–æ —Ä–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω —Ç–∏–∫–µ—Ç—ã', 
                                  reply_markup=markup_inline)
    
    
@router.callback_query(F.data.startswith('admin_ticket_info'))
async def callback_admin_ticket_info(callback: CallbackQuery) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –ø–æ–¥ —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ç—É
    –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

    Args:
        callback (CallbackQuery): —Å–∞–º –∫–æ–ª–±—ç–∫

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    ticket_id = callback.data.split('|')[1]
    ticket_tuple = database_utils.Get.get_ticket_by_id(ticket_id=ticket_id)
    
    ticket_question = ticket_tuple[0]
    ticket_open = str(ticket_tuple[1])[:10]
    
    markup_inline = admin_ticket_info.get(ticket_id=ticket_id)
    await callback.message.delete()
    await callback.message.answer(text=f'–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è - {ticket_id}\n\n' \
                                    f'–í–æ–ø—Ä–æ—Å: {ticket_question}\n' \
                                    f'–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {ticket_open}\n\n',
                                    reply_markup=markup_inline)
    
    
@router.callback_query(F.data.startswith('answer_for_ticket'))
async def callback_answer_for_ticket(callback: CallbackQuery, state: FSMContext) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª—é–±—ç–∫–∞ –ø–æ–¥ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç

    Args:
        callback (CallbackQuery): —Å–∞–º –∫–æ–ª–±—ç–∫
        state (FSMContext): –Ω–∞—Å–ª–µ–¥—É–µ–º fsm

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    ticket_id = callback.data.split('|')[1]
    sent_message = await callback.message.answer('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç')
    await state.set_state(Ticket.waiting_for_response)
    await state.update_data(ticket_id = ticket_id, 
                            first_id = sent_message.message_id, 
                            second_id = callback.message.message_id)
            

@router.message(Ticket.waiting_for_response)
async def fsm_answer_for_ticket(message: Message, state: FSMContext) -> Coroutine:
    """–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–æ–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –Ω–∞—Å–ª–µ–¥—É–µ–º fsm

    Returns:
        Coroutine: –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—É—Ç–∏–Ω
    """
    state_data = await state.get_data()
    ticket_id = state_data['ticket_id']
    database_utils.Update.update_answer_for_ticket_by_id(ticket_id=ticket_id, answer=message.text)
    
    markup_inline = only_to_admin.get()
    await bot.delete_message(chat_id=message.chat.id, message_id=state_data['first_id']) 
    await bot.delete_message(chat_id=message.chat.id, message_id=state_data['second_id']) 
    await message.delete()
    await message.answer('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω', reply_markup=markup_inline)